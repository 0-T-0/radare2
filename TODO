 ____  ___ ____  ___ ____  ___  ______   ____
|  _ \/   \'   \/   \  _ \/ _ \ \__   | /    \
|    <  V  . T  . V      <   _/ .--'_/ |  ()  |
|_|\__|_|__|___/|_|_|_|\__\___/ |_____(_)____/

----------------------------------------[ todo 

<{include libr/TODO}>

* Move 'r_syscall_t' stuff into r_debug
  - Sync r_core

* regio not implemented
  - floating point registers
  - mmx/xmm
  - drX control
* FileDescriptors
  - df -- copy from !fd in r1

* Implement dump+restore as macros
  (dump,)

* Implement process launcher wrapper
  - opens xterm and redirects stdin/stdout/stderr
  - Allows to change chroot
  - Allows to setup chroot
  - Define uid/gid

* BUG:
 rasm2 -s att -a x86.nasm 'push 0x1e(%esp)'

* Added lib_handle stub in r_lib, so we can add plugin support to
  any library by using just a macro

* is RCore->block and blocksize a RBuf ? refactor!11
 
* r_cmd must provide a nesting char table indexing for commands
  - this is pretty similar to r_db
  - every module can register their own commands
  - commands can be listed like in a tree
* 'Vc' cursor mode makes color toggle

* Add test for config.c with _set_cb
* Strip non input symbols in plugins (speed up loading)
* Specify binmask in hexpairs
  - wx 1234:ff0f
  - /x 1234:ff0f

* radare2 -e dbg.engine=vm -d ls
  - load the program using r_bin in virtual space
  - initialize vm and set regs
  - debug backend should use the vm

* Script plugins
 - We should enable r_lib to implement plugins in any
   scripting language, so we can for example prepare
   a .c stub interface for python/perl/ruby/..
