 ____  ___ ____  ___ ____  ___  ______   ____
|  _ \/   \'   \/   \  _ \/ _ \ \__   | /    \
|    <  V  . T  . V      <   _/ .--'_/ |  ()  |
|_|\__|_|__|___/|_|_|_|\__\___/ |_____(_)____/

* filter search results..
  cc 8080 @@ hit* .. check for values that has changed.
  - maybe we should 'cache' some memory regions

* Add 'prj.name', 'prj.desc' and 'prj.md5'
* Add description to project e file.desc ?
* add file.md5 check support when opening new file or project or so..

* anal bug:
[0x08048eec]> pd 2 
    0x08048eec    0               c20400  ret 0x4
 -> this opcodes increments the stack 8 bytes (4+4) . it is not handled correctly

<{include libr/TODO}>

* Move disasm loop into r_print (r_print should depend on r_asm)
* references: data (read, write), code (call, jmp)
* visual byte cursor in disassembly

* code analysis with r_parse
  RAnalAopArg {
    int size;
    int delta;
    int type;
  }
  r_anal_aop_arg_set ();
  r_anal_aop_arg_get ();
  r_anal_aop_arg_binmask ();

* Move 'r_syscall_t' stuff into r_debug
  - Sync r_core

* Write manpages for r2, r2rc, r2rc-tool, rafind2 and rasign2

* analyze push arguments before function calls
  - define number of arguments for given function
  - when the number of arguments differs between the calling
    and the result of the code analysis of the given function
    we should warn
    - this kind of warnings must be done with r_log_ functions
      so we hook it into a log file

* diff code analysis // nibble
  - diff two programs
     1st level:
        - check all functions EQUAL, DIFFERENT, REMOVED, ADDED
        - check all symbols
        - check all imports
        - check all strings
     2nd level:
        - basic block level diffing (output in graph mode)

* Implement process launcher wrapper // anybody
  - opens xterm and redirects stdin/stdout/stderr
  - Allows to change chroot
  - Allows to setup chroot
  - Define uid/gid

* Is RCore->block and blocksize a RBuf ? refactor!11
 
* radare2 -e dbg.engine=vm -d ls
  - load the program using r_bin in virtual space
  - initialize vm and set regs
  - debug backend should use the vm

* Script plugins
 - We should enable r_lib to implement plugins in any
   scripting language, so we can for example prepare
   a .c stub interface for python/perl/ruby/..
   - this requires a swig bridge
