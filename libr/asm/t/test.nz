#!/bin/sh

foo() {
	A=$(rasm2 -a x86.as -b ${BITS} "$1")
	B=$(rasm2 -a x86.nz -b ${BITS} "$1")
	if [ "${A}" = "${B}" ]; then
		printf "OK       %12s.as %12s.nz %20s\n" "$A" "$B" "$1"
	else
		printf "FAILED   %12s.as %12s.nz %20s\n" "$A" "$B" "$1"
	fi
}

BITS=32
if [ -n "$1" ]; then
	foo "$1"
	exit 0
fi

echo "==> Running 32bit tests..."

foo "leal eax, 0x804900"
exit 0

foo "pop [eax]"
foo "pop [esp]"
foo "pop [ebp]"
foo "pop [edi]"
foo "pop [esi]"
foo "pop [ecx]"

foo "push [eax]"
foo "push [esp]"
foo "push [ebp]"
foo "push [edi]"
foo "push [esi]"
foo "push [ecx]"
exit 0
foo "pop [eax]"
foo "push [eax]"
foo "push [ebp+4]"
foo "push [eax+8]"
foo "pop [ebp+4]"
foo "pop [eax+4]"
exit 0


if true ; then
foo "mov eax, 0x8049000"
# foo "call 0x804800";
foo "jmp ecx"
foo "call ebx"
foo "ret"

foo "xor eax,eax"
foo "xor ebx,eax"
foo "xor eax,ebx"
foo "xor esp,esp"
foo "xor esi,ebp"

foo "add eax, 3"
foo "sub ebx, 3"
foo "sub ebx, -3"

foo "sub eax, ebx" 
foo "sub eax, eax" 
foo "sub ebx, eax" 

foo "add [eax], eax" 
foo "sub [ebx], eax" 
foo "sub [ebx], eax" 
foo "add [eax], eax" 

foo "xor [eax], eax" 

foo "mov eax, [eax]"
foo "mov eax, [ebx]"
foo "mov ebx, [eax]"

foo "inc eax"
foo "inc esi"
foo "dec esi"
foo "dec eax"

foo "mov eax, 3"
foo "mov ebx, eax"
foo "mov eax, eax"
foo "mov eax, ebx"

foo "mov [eax], eax"
foo "mov [eax], ebx"
foo "mov [ebx], eax"
foo "mov eax, [ebx]"

# XX can be compressed
# foo "mov [33], eax"
foo "mov [33], ecx"
foo "mov [33], edx"
foo "mov [33], ebx"
foo "mov [33], esp"
foo "mov [33], ebp"
foo "mov [33], esi"
foo "mov [33], edi"

foo "sub esi,-334"
foo "add esi,-334"

foo "mov [eax+eax], eax"
foo "mov [eax+ebx], eax"
foo "mov [eax+ecx], eax"
foo "mov [ebx+eax], eax"
foo "mov [eax+eax], ebx"
foo "mov [eax+eax], ecx"
foo "mov [eax+eax], eax"
foo "mov [eax+ebx], ebx"
foo "mov [eax+2], ebx"
foo "mov [ebx+2], ebx"
fi

# 64 bit tests #
# ============ #
BITS=64
echo "==> Running 64bit tests..."

if true ; then
foo "mov eax, [esi]"
foo "test rcx, rcx"
foo "mov rax, 3"
foo "mov rbx, 3"
foo "mov rbx, rax"
foo "mov rsi, rbx"
foo "mov [rsi], rbx"

foo "xor rax, rax"
foo "xor [rax], rax" 
foo "xor [rsi], rbx"

foo "call rbx"
foo "jmp rbx"
foo "ret"
foo "syscall"
foo "pop rax"
foo "mov rax, 33"
foo "add rax, rcx"
foo "add rax, 44"
foo "sub rax, rbx"
foo "sub rax, 44"
fi
