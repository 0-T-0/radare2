r_meta
======

** Should we store traces here??..or do we have to use r_trace
** xrefs stuff should be delegated to the flags?
  - we can generate xrefs metadata from flags analysis
  - we can use r_meta as 'static storage' and flags as playground.
** data_* api should be refactored to use less functions with more
   flexible arguments.
** We can store multiple linked lists depending on type of data, to
   reduce the search space.

enum {
 R_META_DATA,
 R_META_CODE,
 R_META_CODE_XREF,
 R_META_DATA_XREF,
 R_META_STRING,
 R_META_FUNCTION,
 R_META_STRUCT,
 R_META_COMMENT,
 R_META_FOLDER
}

struct r_meta_item_t {
  int type;
  u64 addr;
  u64 size;
  char *data;
  struct list_head list;
};

struct r_meta_t {
  struct list_head comments;
  struct list_head xrefs;
};

struct r_meta_t * meta = r_meta_new();

/* get list of xrefs to this addr */
r_meta_xrefs_get(meta, 0x8040400);
r_meta_xrefs_add(meta, 0x8040400, 0x8049030);

r_meta_list(meta, RMetaCallback)

r_meta_add(meta, R_META_CODE_XREF, 100, 200);
r_meta_add_s(meta, R_META_COMMENT, 100, "Hello world");
r_meta_add_s(meta, R_META_STRUCT, 100, "xxi");

r_meta_get(meta, R_META_COMMENT, 0x804800);
r_meta_get_range(meta, R_META_COMMENT, 0x804800, 0x8049000);

// TODO: rethink argument order
r_meta_get_closer(meta, 0x0394, R_META_STRING, R_META_GET_FORWARD);
